@page "/adv"
@using Microsoft.AspNetCore.Http
@inject ILogger<Intro> Logger
@inject IHttpContextAccessor httpContextAccessor
<PageTitle>應用</PageTitle>
@*<DevOpsProject.Pages.CompUi.ServerInfoCompUi />*@
@*版本:@linkTimeLocal.ToString("yyyy.MM.dd.HHmm")*@
@if (true)
{
    <h1>應用</h1>

    <section class="iconPromote">
        <ul>
            <li>
                <a href="http://192.168.150.250:8881/" target="_self" title="端口8881 上線版本">
                    <img src="/img/Application.png" alt width="64px">
                    <p>端口8881 上線版本</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.206:8813/" target="_self" title="MES查詢(快照版)">
                    <img src="/img/snapshot.png" alt width="64px">
                    <p>MES查詢(快照版)</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.206:8815/" target="_self" title="MES查詢(線上版)">
                    <img src="/img/online.png" alt width="64px">
                    <p>MES查詢(線上版)</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.250:8915/etg-lot007/5203-23072701P00024/ext" target="_self" title="MES查詢(線上版)討論工時">
                    <img src="/img/online.png" alt width="64px">
                    <p>MES查詢(線上版)討論工時</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.206:8566/" target="_self" title="MES月計畫維護">
                    <img src="/img/plan.png" alt width="64px">
                    <p>MES月計畫維護</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.209:8855/" target="_self" title="組裝機IoT">
                    <img src="/img/Iot.png" alt width="64px">
                    <p>組裝機IoT</p>
                </a>
            </li>
            <li>
                <a href="http://192.168.150.207:8835/" target="_self" title="客訴">
                    <img src="/img/customer.png" alt width="64px">
                    <p>客訴</p>
                </a>
            </li>
           
        </ul>

    </section>
}
<style>
    .iconPromote li img {
        width: 55%;
        height: auto;
        max-width: 64px;
    }

    .iconPromote li img {
        display: block;
        margin: 0 auto 2px;
        width: 64px;
        height: 64px;
        background: #fff;
        border-radius: 50%;
        border: 2px solid #99a6ac;
        transition: .2s;
    }

        .iconPromote li img:hover {
            background-color: yellow; /* Change to the color you want on hover */
        }

    img {
        border: none;
        overflow-clip-margin: content-box;
        overflow: clip;
    }

    .iconPromote a {
        display: block;
        position: relative;
        color: #444;
        text-decoration: none;
        margin: 0 2px;
        padding: 5px 0 3px;
    }

    li {
        text-align: -webkit-match-parent;
    }

    .iconPromote ul {
        overflow: hidden;
        text-align: center;
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex; /* Use flexbox to make the icons appear in a row */
        justify-content: center; /* Center-align the icons horizontally */
    }

    .iconPromote li {
        text-align: -webkit-match-parent;
        margin: 0; /* Remove the margin that causes uneven spacing */
        flex: 1; /* Distribute equal width among all li elements */
    }


    ul {
        display: block;
        list-style-type: disc;
        margin-block-start: 1em;
        margin-block-end: 1em;
        margin-inline-start: 0px;
        margin-inline-end: 0px;
        padding-inline-start: 40px;
    }

    body {
        position: relative;
        margin: 0;
        padding: 0;
        color: #333;
        font-family: "微軟正黑體",Helvetica,Arial,sans-serif;
        min-height: inherit;
        font-size: .9375em;
        font-weight: normal;
    }

    .iconPromote {
        float: none;
        width: auto;
        padding: 10px 0;
        margin: 15px 0;
        clear: both;
    }

    .iconPromote {
        width: 800px;
        float: left;
    }

</style>
@code {
    protected override async Task OnInitializedAsync()
    {
        var remoteIpAddress = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress;
        var localIpAddress = httpContextAccessor.HttpContext.Connection?.LocalIpAddress;

        var ipv4Address = "???";
        var serverIP = "???";
        if (remoteIpAddress != null)
        {
            if (remoteIpAddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)
            {
                // Convert IPv6 to IPv4
                remoteIpAddress = System.Net.Dns.GetHostEntry(remoteIpAddress).AddressList
                    .FirstOrDefault(x => x.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);
            }
            if (remoteIpAddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                // IPv4 address
                ipv4Address = remoteIpAddress.ToString();
            }
        }
        if (localIpAddress != null)
        {
            if (localIpAddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)
            {
                // Convert IPv6 to IPv4
                localIpAddress = System.Net.Dns.GetHostEntry(remoteIpAddress).AddressList
                    .FirstOrDefault(x => x.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);
            }
            if (localIpAddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                // IPv4 address
                serverIP = localIpAddress.ToString();
            }
        }




        string timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
        //Logger.LogInformation("User visited the intro page at {Timestamp}", timeStamp);

        // Save the log entry to a file with the yyyyMMdd naming convention
        string logEntry = $"{ipv4Address} visited {serverIP} at {timeStamp}";
        string logFileName = $"devops_log_{DateTime.UtcNow:yyyyMMdd}.txt";
        await File.AppendAllTextAsync(logFileName, logEntry + Environment.NewLine);
    }
}